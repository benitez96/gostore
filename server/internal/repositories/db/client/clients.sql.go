// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package db

import (
	"context"
	"database/sql"
)

const getClients = `-- name: GetClients :many
SELECT 
  name, 
  lastname, 
  dni, 
  s.description, 
  s.id 
FROM clients c
  LEFT JOIN states s ON c.state_id = s.id
WHERE name LIKE '%' || ? || '%' 
   OR lastname LIKE '%' || ? || '%' 
   OR dni LIKE '%' || ? || '%'
LIMIT ? OFFSET ?
`

type GetClientsParams struct {
	Column1 sql.NullString
	Column2 sql.NullString
	Column3 sql.NullString
	Limit   int64
	Offset  int64
}

type GetClientsRow struct {
	Name        string
	Lastname    sql.NullString
	Dni         sql.NullString
	Description sql.NullString
	ID          sql.NullInt64
}

func (q *Queries) GetClients(ctx context.Context, arg GetClientsParams) ([]GetClientsRow, error) {
	rows, err := q.db.QueryContext(ctx, getClients,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClientsRow
	for rows.Next() {
		var i GetClientsRow
		if err := rows.Scan(
			&i.Name,
			&i.Lastname,
			&i.Dni,
			&i.Description,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
