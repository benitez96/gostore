// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sales.sql

package sqlc

import (
	"context"
	"time"
)

const createSale = `-- name: CreateSale :one
INSERT INTO sales (description, amount, client_id, date)
VALUES (?, ?, ?, ?)
RETURNING id
`

type CreateSaleParams struct {
	Description string
	Amount      float64
	ClientID    int64
	Date        time.Time
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSale,
		arg.Description,
		arg.Amount,
		arg.ClientID,
		arg.Date,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteSale = `-- name: DeleteSale :exec
DELETE FROM sales WHERE id = ?
`

func (q *Queries) DeleteSale(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSale, id)
	return err
}

const getSaleByID = `-- name: GetSaleByID :one
SELECT id, description, amount, is_paid, state_id, client_id, date, created_at, updated_at FROM sales WHERE id = ?
`

func (q *Queries) GetSaleByID(ctx context.Context, id int64) (Sale, error) {
	row := q.db.QueryRowContext(ctx, getSaleByID, id)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Amount,
		&i.IsPaid,
		&i.StateID,
		&i.ClientID,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSalesByClientID = `-- name: GetSalesByClientID :many
SELECT 
  s.id,
  s.client_id,
  s.description,
  s.date,
  s.state_id,
  s.is_paid
FROM sales s WHERE s.client_id = ? ORDER BY s.id desc
`

type GetSalesByClientIDRow struct {
	ID          int64
	ClientID    int64
	Description string
	Date        time.Time
	StateID     int64
	IsPaid      bool
}

func (q *Queries) GetSalesByClientID(ctx context.Context, clientID int64) ([]GetSalesByClientIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getSalesByClientID, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSalesByClientIDRow
	for rows.Next() {
		var i GetSalesByClientIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.Description,
			&i.Date,
			&i.StateID,
			&i.IsPaid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSalePaymentStatus = `-- name: UpdateSalePaymentStatus :exec
UPDATE sales SET is_paid = ?, state_id = ? WHERE id = ?
`

type UpdateSalePaymentStatusParams struct {
	IsPaid  bool
	StateID int64
	ID      int64
}

func (q *Queries) UpdateSalePaymentStatus(ctx context.Context, arg UpdateSalePaymentStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSalePaymentStatus, arg.IsPaid, arg.StateID, arg.ID)
	return err
}
