// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quotas.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createQuota = `-- name: CreateQuota :exec
INSERT INTO quotas (number, amount, due_date, sale_id, client_id)
VALUES (?, ?, ?, ?, ?)
`

type CreateQuotaParams struct {
	Number   int64
	Amount   float64
	DueDate  time.Time
	SaleID   int64
	ClientID int64
}

func (q *Queries) CreateQuota(ctx context.Context, arg CreateQuotaParams) error {
	_, err := q.db.ExecContext(ctx, createQuota,
		arg.Number,
		arg.Amount,
		arg.DueDate,
		arg.SaleID,
		arg.ClientID,
	)
	return err
}

const getQuotaByID = `-- name: GetQuotaByID :one
SELECT id, number, amount, due_date, is_paid, state_id, sale_id, client_id, created_at, updated_at, "foreign" FROM quotas WHERE id = ?
`

func (q *Queries) GetQuotaByID(ctx context.Context, id int64) (Quota, error) {
	row := q.db.QueryRowContext(ctx, getQuotaByID, id)
	var i Quota
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Amount,
		&i.DueDate,
		&i.IsPaid,
		&i.StateID,
		&i.SaleID,
		&i.ClientID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Foreign,
	)
	return i, err
}

const getSaleQuotas = `-- name: GetSaleQuotas :many
SELECT id, number, amount, due_date, is_paid, state_id, sale_id, client_id, created_at, updated_at, "foreign" FROM quotas WHERE sale_id = ?
`

func (q *Queries) GetSaleQuotas(ctx context.Context, saleID int64) ([]Quota, error) {
	rows, err := q.db.QueryContext(ctx, getSaleQuotas, saleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quota
	for rows.Next() {
		var i Quota
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.Amount,
			&i.DueDate,
			&i.IsPaid,
			&i.StateID,
			&i.SaleID,
			&i.ClientID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Foreign,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuota = `-- name: UpdateQuota :exec
UPDATE quotas SET amount = ?, due_date = ? WHERE id = ?
`

type UpdateQuotaParams struct {
	Amount  float64
	DueDate time.Time
	ID      int64
}

func (q *Queries) UpdateQuota(ctx context.Context, arg UpdateQuotaParams) error {
	_, err := q.db.ExecContext(ctx, updateQuota, arg.Amount, arg.DueDate, arg.ID)
	return err
}

const updateQuotaPaymentStatus = `-- name: UpdateQuotaPaymentStatus :exec
UPDATE quotas SET is_paid = ?, state_id = ? WHERE id = ?
`

type UpdateQuotaPaymentStatusParams struct {
	IsPaid  sql.NullBool
	StateID int64
	ID      int64
}

func (q *Queries) UpdateQuotaPaymentStatus(ctx context.Context, arg UpdateQuotaPaymentStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateQuotaPaymentStatus, arg.IsPaid, arg.StateID, arg.ID)
	return err
}
