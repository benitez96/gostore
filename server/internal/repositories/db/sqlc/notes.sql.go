// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notes.sql

package sqlc

import (
	"context"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (content, sale_id)
VALUES (?, ?)
RETURNING id, content, sale_id, created_at, updated_at
`

type CreateNoteParams struct {
	Content string
	SaleID  int64
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.Content, arg.SaleID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.SaleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE id = ?
`

func (q *Queries) DeleteNote(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const getNotesBySaleID = `-- name: GetNotesBySaleID :many
SELECT id, content, sale_id, created_at, updated_at FROM notes WHERE sale_id = ? ORDER BY created_at DESC
`

func (q *Queries) GetNotesBySaleID(ctx context.Context, saleID int64) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, getNotesBySaleID, saleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.SaleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
