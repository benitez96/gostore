// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(id)
FROM users
WHERE is_active = ?
`

func (q *Queries) CountUsers(ctx context.Context, isActive bool) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers, isActive)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users 
SET is_active = false, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT 
  id,
  username,
  permissions,
  first_name,
  last_name,
  is_active,
  last_login_at,
  created_at,
  updated_at
FROM users
ORDER BY is_active DESC, created_at DESC
`

type GetAllUsersRow struct {
	ID          int64
	Username    string
	Permissions int64
	FirstName   sql.NullString
	LastName    sql.NullString
	IsActive    bool
	LastLoginAt sql.NullTime
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Permissions,
			&i.FirstName,
			&i.LastName,
			&i.IsActive,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT 
  id,
  username,
  permissions,
  first_name,
  last_name,
  is_active,
  last_login_at,
  created_at,
  updated_at
FROM users
WHERE id = ?
`

type GetUserByIDRow struct {
	ID          int64
	Username    string
	Permissions int64
	FirstName   sql.NullString
	LastName    sql.NullString
	IsActive    bool
	LastLoginAt sql.NullTime
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Permissions,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT 
  id,
  username,
  password_hash,
  permissions,
  first_name,
  last_name,
  is_active,
  last_login_at,
  created_at,
  updated_at
FROM users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Permissions,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT 
  id,
  username,
  permissions,
  first_name,
  last_name,
  is_active,
  last_login_at,
  created_at,
  updated_at
FROM users
WHERE is_active = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetUsersParams struct {
	IsActive bool
	Limit    int64
	Offset   int64
}

type GetUsersRow struct {
	ID          int64
	Username    string
	Permissions int64
	FirstName   sql.NullString
	LastName    sql.NullString
	IsActive    bool
	LastLoginAt sql.NullTime
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.IsActive, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Permissions,
			&i.FirstName,
			&i.LastName,
			&i.IsActive,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users
(username, password_hash, permissions, first_name, last_name, is_active)
VALUES
(?, ?, ?, ?, ?, ?)
RETURNING id, username, permissions, first_name, last_name, is_active, created_at, updated_at
`

type InsertUserParams struct {
	Username     string
	PasswordHash string
	Permissions  int64
	FirstName    sql.NullString
	LastName     sql.NullString
	IsActive     bool
}

type InsertUserRow struct {
	ID          int64
	Username    string
	Permissions int64
	FirstName   sql.NullString
	LastName    sql.NullString
	IsActive    bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Username,
		arg.PasswordHash,
		arg.Permissions,
		arg.FirstName,
		arg.LastName,
		arg.IsActive,
	)
	var i InsertUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Permissions,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET username = ?, permissions = ?, first_name = ?, last_name = ?, is_active = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserParams struct {
	Username    string
	Permissions int64
	FirstName   sql.NullString
	LastName    sql.NullString
	IsActive    bool
	ID          int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Permissions,
		arg.FirstName,
		arg.LastName,
		arg.IsActive,
		arg.ID,
	)
	return err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users 
SET last_login_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateUserLastLogin, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users 
SET password_hash = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	ID           int64
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
	return err
}
