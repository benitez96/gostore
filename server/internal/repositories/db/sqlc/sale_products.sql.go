// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sale_products.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createSaleProduct = `-- name: CreateSaleProduct :exec
INSERT INTO sale_products (name, cost, price, quantity, sale_id, client_id)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateSaleProductParams struct {
	Name     string
	Cost     sql.NullFloat64
	Price    sql.NullFloat64
	Quantity int64
	SaleID   int64
	ClientID int64
}

func (q *Queries) CreateSaleProduct(ctx context.Context, arg CreateSaleProductParams) error {
	_, err := q.db.ExecContext(ctx, createSaleProduct,
		arg.Name,
		arg.Cost,
		arg.Price,
		arg.Quantity,
		arg.SaleID,
		arg.ClientID,
	)
	return err
}

const getSaleProductsBySaleID = `-- name: GetSaleProductsBySaleID :many
SELECT id, name, cost, price, quantity
FROM sale_products
WHERE sale_id = ?
`

type GetSaleProductsBySaleIDRow struct {
	ID       int64
	Name     string
	Cost     sql.NullFloat64
	Price    sql.NullFloat64
	Quantity int64
}

func (q *Queries) GetSaleProductsBySaleID(ctx context.Context, saleID int64) ([]GetSaleProductsBySaleIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getSaleProductsBySaleID, saleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSaleProductsBySaleIDRow
	for rows.Next() {
		var i GetSaleProductsBySaleIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cost,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
