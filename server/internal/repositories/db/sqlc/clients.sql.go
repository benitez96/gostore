// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package sqlc

import (
	"context"
	"database/sql"
	"strings"
)

const countClients = `-- name: CountClients :one
SELECT COUNT(id)
FROM clients c
WHERE (name LIKE ?
   OR lastname LIKE ?
   OR dni LIKE ?)
  AND (CASE WHEN ? = '' THEN 1 ELSE c.state_id IN (/*SLICE:state_ids*/?) END)
`

type CountClientsParams struct {
	Name     string
	Lastname string
	Dni      string
	Column4  interface{}
	StateIds []int64
}

func (q *Queries) CountClients(ctx context.Context, arg CountClientsParams) (int64, error) {
	query := countClients
	var queryParams []interface{}
	queryParams = append(queryParams, arg.Name)
	queryParams = append(queryParams, arg.Lastname)
	queryParams = append(queryParams, arg.Dni)
	queryParams = append(queryParams, arg.Column4)
	if len(arg.StateIds) > 0 {
		for _, v := range arg.StateIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:state_ids*/?", strings.Repeat(",?", len(arg.StateIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:state_ids*/?", "NULL", 1)
	}
	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients WHERE id = ?
`

func (q *Queries) DeleteClient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getClientByID = `-- name: GetClientByID :one
SELECT 
  c.id, 
  c.name, 
  c.lastname, 
  c.dni, 
  c.email, 
  c.phone, 
  c.address,
  c.state_id, 
  s.id AS state_id, 
  s.description AS state_description,
  c.created_at, 
  c.updated_at
FROM clients c
INNER JOIN states s ON c.state_id = s.id
WHERE c.id = ?
`

type GetClientByIDRow struct {
	ID               int64
	Name             string
	Lastname         string
	Dni              string
	Email            sql.NullString
	Phone            sql.NullString
	Address          sql.NullString
	StateID          int64
	StateID_2        int64
	StateDescription string
	CreatedAt        sql.NullTime
	UpdatedAt        sql.NullTime
}

func (q *Queries) GetClientByID(ctx context.Context, id int64) (GetClientByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, id)
	var i GetClientByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lastname,
		&i.Dni,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.StateID,
		&i.StateID_2,
		&i.StateDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClients = `-- name: GetClients :many
SELECT 
  c.id,
  name, 
  lastname, 
  dni, 
  s.description AS stateDescription, 
  s.id AS stateId
FROM clients c
  INNER JOIN states s ON c.state_id = s.id
WHERE (name LIKE ?
   OR lastname LIKE ?
   OR dni LIKE ?)
  AND (CASE WHEN ? = '' THEN 1 ELSE c.state_id IN (/*SLICE:state_ids*/?) END)
LIMIT ? OFFSET ?
`

type GetClientsParams struct {
	Name     string
	Lastname string
	Dni      string
	Column4  interface{}
	StateIds []int64
	Limit    int64
	Offset   int64
}

type GetClientsRow struct {
	ID               int64
	Name             string
	Lastname         string
	Dni              string
	Statedescription string
	Stateid          int64
}

func (q *Queries) GetClients(ctx context.Context, arg GetClientsParams) ([]GetClientsRow, error) {
	query := getClients
	var queryParams []interface{}
	queryParams = append(queryParams, arg.Name)
	queryParams = append(queryParams, arg.Lastname)
	queryParams = append(queryParams, arg.Dni)
	queryParams = append(queryParams, arg.Column4)
	if len(arg.StateIds) > 0 {
		for _, v := range arg.StateIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:state_ids*/?", strings.Repeat(",?", len(arg.StateIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:state_ids*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Limit)
	queryParams = append(queryParams, arg.Offset)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClientsRow
	for rows.Next() {
		var i GetClientsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lastname,
			&i.Dni,
			&i.Statedescription,
			&i.Stateid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertClient = `-- name: InsertClient :one
INSERT INTO clients
( name, lastname, dni, email, phone, address, state_id)
VALUES
(?, ?, ?, ?, ?, ?, 1)
RETURNING id, name, lastname, dni, email, phone, address, state_id, created_at, updated_at
`

type InsertClientParams struct {
	Name     string
	Lastname string
	Dni      string
	Email    sql.NullString
	Phone    sql.NullString
	Address  sql.NullString
}

func (q *Queries) InsertClient(ctx context.Context, arg InsertClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, insertClient,
		arg.Name,
		arg.Lastname,
		arg.Dni,
		arg.Email,
		arg.Phone,
		arg.Address,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lastname,
		&i.Dni,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.StateID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateClient = `-- name: UpdateClient :exec
UPDATE clients SET name = ?, lastname = ?, dni = ?, email = ?, phone = ?, address = ? WHERE id = ?
`

type UpdateClientParams struct {
	Name     string
	Lastname string
	Dni      string
	Email    sql.NullString
	Phone    sql.NullString
	Address  sql.NullString
	ID       int64
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.ExecContext(ctx, updateClient,
		arg.Name,
		arg.Lastname,
		arg.Dni,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.ID,
	)
	return err
}

const updateClientState = `-- name: UpdateClientState :exec
UPDATE clients SET state_id = ? WHERE id = ?
`

type UpdateClientStateParams struct {
	StateID int64
	ID      int64
}

func (q *Queries) UpdateClientState(ctx context.Context, arg UpdateClientStateParams) error {
	_, err := q.db.ExecContext(ctx, updateClientState, arg.StateID, arg.ID)
	return err
}
